---
/*!
 * Copyright (c) Cynthia Rey, All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import { getCollection, render } from 'astro:content'

import GlobalLayout from '../../layouts/GlobalLayout.astro'
import PageHeader from '../../components/PageHeader.astro'
import Section from '../../components/Section.astro'
import BlogPost from '../../components/BlogPost.astro'

const posts = await getCollection('blog')
	// No other way to get the readTime than to render it...
	.then((posts) => Promise.all(posts.map(async (p) => ({ ...p, ...await render(p) }))))
	.then((posts) => posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()))
---
<GlobalLayout title="cynthia's blog">
	<Fragment slot="head">
		<link rel="alternate" type="application/rss+xml" href="/blog/feed.xml" />
	</Fragment>

	<PageHeader>
		Cynthia's blog
	</PageHeader>
	<main>
		<Section>
			I write stuff that may be mildly interesting. <a href="/blog/feed.xml" target="_blank">RSS Feed</a>
		</Section>
		<Section class="blog-posts">
			{posts.map((post) => (
				<BlogPost
					url={`/blog/${post.id}`}
					title={post.data.title}
					description={post.data.description}
					tags={post.data.tags}
					readingTime={post.remarkPluginFrontmatter.readingTime}
					date={post.data.date}
				/>
			))}
		</Section>
	</main>
</GlobalLayout>

<style>
	.blog-posts {
		display: grid;
		column-gap: 3rem;
		row-gap: 4rem;
		grid-template-columns: repeat(auto-fill, minmax(370px, 1fr))
	}
</style>
