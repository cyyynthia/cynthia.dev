---
/*!
 * Copyright (c) Cynthia Rey, All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import UnderlinedHeading from './UnderlinedHeading.astro'

const transition = {
	forwards: {
		old: [
			{
				name: 'astroFadeOut',
				duration: '90ms',
				fillMode: 'both',
			},
			{
				name: 'slideToBottom',
				duration: '90ms',
				fillMode: 'both',
			},
		],
		new: [
			{
				name: 'astroFadeIn',
				duration: '90ms',
				fillMode: 'both',
				delay: '90ms',
			},
			{
				name: 'slideFromTop',
				duration: '90ms',
				fillMode: 'both',
				delay: '90ms',
			},
		],
	},
	backwards: {
		old: [
			{
				name: 'astroFadeOut',
				duration: '90ms',
				fillMode: 'both',
			},
			{
				name: 'slideToTop',
				duration: '90ms',
				fillMode: 'both',
			},
		],
		new: [
			{
				name: 'astroFadeIn',
				duration: '90ms',
				fillMode: 'both',
				delay: '90ms',
			},
			{
				name: 'slideFromBottom',
				duration: '90ms',
				fillMode: 'both',
				delay: '90ms',
			},
		],
	},
}
---
<header class:list={{ 'has-subtitle': Astro.slots.has('subtitle') }} id="main-header">
	<div class="transition-wrapper" transition:animate={transition}>
		<UnderlinedHeading level={1} class="title">
			<slot />
		</UnderlinedHeading>
		{Astro.slots.has('subtitle') && (
			<div class="subtitle">
				<slot name="subtitle" />
			</div>
		)}

		<script is:inline data-astro-rerun>
			let now = new Date()
			if (now.getDate() === 14 && now.getMonth() === 6)
				document.getElementById('main-header').classList.add('france')
		</script>
	</div>
</header>

<style>
	header {
		margin-bottom: 1.5rem;
		padding-left: 5.75rem;
		position: relative;
		display: flex;
		min-height: 5.5rem;
		flex-direction: column;
		justify-content: center;
		line-height: 1.25;
	}

	header::before {
		content: '';
		position: absolute;
		width: 4.5rem;
		height: 100%;
		top: 4px;
		left: 4px;
		transform: rotate(15deg);
		background-image: url('../assets/paw.svg');
		background-size: 4.5rem 4.5rem;
		background-position: center;
		background-repeat: no-repeat;
	}

	.transition-wrapper {
		display: flex;
		flex-direction: column;
		justify-content: center;
		height: 100%;
	}

	.title {
		margin: 0;
		font-weight: 500;
		font-size: 2.4rem;
	}

	.france .title :global(span) {
		background-image: linear-gradient(90deg, #000091, #000091 33%, #ededed 33%, #ededed 67%, #e1000f 67%, #e1000f);
	}

	.subtitle {
		margin: -0.1rem 0 0;
		font-weight: 400;
		font-size: 1.6rem;
	}

	@keyframes slideFromBottom {
		from {
			transform: translateY(15%);
		}
	}

	@keyframes slideFromTop {
		from {
			transform: translateY(-15%);
		}
	}

	@keyframes slideToBottom {
		to {
			transform: translateY(15%);
		}
	}

	@keyframes slideToTop {
		to {
			transform: translateY(-15%);
		}
	}
</style>
